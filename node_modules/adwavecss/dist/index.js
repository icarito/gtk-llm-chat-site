export class Theme {
    static dark = "dark-theme";
    static light = "light-theme";
    static className(params) {
        switch (params.type) {
            case "light":
                return Theme.light;
        }
        return Theme.dark;
    }
    static toString() {
        return Theme.dark;
    }
}
/**
 * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/box.md
 */
export class Box {
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/box.md#ClassNames
     */
    static box = "box";
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/box.md#ClassNames
     */
    static rounded = "rounded";
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/box.md#ClassNames
     */
    static bg1 = "bg-1";
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/box.md#ClassNames
     */
    static bg2 = "bg-2";
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/box.md#ClassNames
     */
    static bg3 = "bg-3";
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/box.md#ClassNames
     */
    static bg4 = "bg-4";
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/box.md#ClassNames
     */
    static bg5 = "bg-5";
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/box.md#ClassNames
     */
    static bg6 = "bg-6";
    static className(params) {
        let className = Box.box;
        if (params.rounded) {
            className += ` ${Box.rounded}`;
        }
        if (params.bg) {
            switch (params.bg) {
                case 1:
                    className += ` ${Box.bg1}`;
                    break;
                case 2:
                    className += ` ${Box.bg2}`;
                    break;
                case 3:
                    className += ` ${Box.bg3}`;
                    break;
                case 4:
                    className += ` ${Box.bg4}`;
                    break;
                case 5:
                    className += ` ${Box.bg5}`;
                    break;
                case 6:
                    className += ` ${Box.bg6}`;
                    break;
            }
        }
        return className;
    }
    static toString() {
        return Box.box;
    }
}
/**
 * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/button.md
 */
export class Button {
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/button.md#ClassNames
     */
    static button = "btn";
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/button.md#ClassNames
     */
    static disabled = "disabled";
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/button.md#ClassNames
     */
    static primary = "primary";
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/button.md#ClassNames
     */
    static danger = "danger";
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/button.md#ClassNames
     */
    static flat = "flat";
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/button.md#ClassNames
     */
    static pill = "pill";
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/button.md#ClassNames
     */
    static circular = "circular";
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/button.md#ClassNames
     */
    static square = "square";
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/button.md#ClassNames
     */
    static toggled = "toggled";
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/button.md#ClassNames
     */
    static wrapper = "btn-wrapper";
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/button.md#ClassNames
     */
    static adaptive = "adaptive";
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/linked.md
     */
    static linked = "linked";
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/linked.md
     */
    static linkedVertical = "vertical";
    static className(params) {
        let className = Button.button;
        if (params.disabled) {
            className += ` ${Button.disabled}`;
        }
        if (params.color) {
            switch (params.color) {
                case "primary":
                    className += ` ${Button.primary}`;
                    break;
                case "danger":
                    className += ` ${Button.danger}`;
                    break;
            }
        }
        if (params.shape) {
            switch (params.shape) {
                case "circular":
                    className += ` ${Button.circular}`;
                    break;
                case "square":
                    className += ` ${Button.square}`;
                    break;
            }
        }
        if (params.flat) {
            className += ` ${Button.flat}`;
        }
        if (params.pill) {
            className += ` ${Button.pill}`;
        }
        if (params.toggled) {
            className += ` ${Button.toggled}`;
        }
        if (params.adaptive) {
            className += ` ${Button.adaptive}`;
        }
        if (params.linked) {
            className += ` ${Button.linked}`;
        }
        if (params.linkedVertical) {
            className += ` ${Button.linkedVertical}`;
        }
        return className;
    }
    static toString() {
        return Button.button;
    }
}
/**
 * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/card.md
 */
export class Card {
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/card.md#ClassNames
     */
    static card = "card";
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/card.md#ClassNames
     */
    static activable = "activable";
    static className(params) {
        let className = Card.card;
        if (params.activable) {
            className += ` ${Card.activable}`;
        }
        return className;
    }
    static toString() {
        return Card.card;
    }
}
/**
 * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/checkbox.md
 */
export class Checkbox {
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/checkbox.md#ClassNames
     */
    static checkbox = "checkbox";
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/checkbox.md#ClassNames
     */
    static disabled = "disabled";
    static className(params) {
        let className = Checkbox.checkbox;
        if (params.disabled) {
            className += ` ${Checkbox.disabled}`;
        }
        return className;
    }
    static toString() {
        return Checkbox.checkbox;
    }
}
export class Dialog {
    static dialog = "dialog";
    static header = "dialog-header";
    static title = "dailog-title";
    static body = "dialog-body";
    static className() {
        return Dialog.dialog;
    }
    static toString() {
        return Dialog.dialog;
    }
}
/**
 * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/frame.md
 */
export class Frame {
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/frame.md#ClassNames
     */
    static frame = "frame";
    static className() {
        return Frame.frame;
    }
    static toString() {
        return Frame.frame;
    }
}
/**
 * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/input.md
 */
export class Input {
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/input.md#ClassNames
     */
    static input = "input";
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/input.md#ClassNames
     */
    static disabled = "disabled";
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/linked.md
     */
    static linked = "linked";
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/linked.md
     */
    static linkedVertical = "vertical";
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/input.md#ClassNames
     */
    static wrapper = "input-wrapper";
    static className(params) {
        let className = Input.input;
        if (params.disabled) {
            className += ` ${Input.disabled}`;
        }
        if (params.linked) {
            className += ` ${Input.linked}`;
        }
        if (params.linkedVertical) {
            className += ` ${Input.linkedVertical}`;
        }
        return className;
    }
    static wrapperClassName() {
        return Input.wrapper;
    }
    static toString() {
        return Input.input;
    }
}
/**
 * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/list.md
 */
export class List {
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/list.md#ClassNames
     */
    static list = "list";
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/list.md#ClassNames
     */
    static element = "list-element";
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/list.md#ClassNames
     */
    static activableElement = "activable";
    static className() {
        let className = List.list;
        return className;
    }
    static elementClassName(params) {
        let className = List.element;
        if (params.activable) {
            className += ` ${List.activableElement}`;
        }
        return className;
    }
    static toString() {
        return List.list;
    }
}
/**
 * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/message.md
 */
export class Message {
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/message.md#ClassNames
     */
    static message = "message";
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/message.md#ClassNames
     */
    static info = "info";
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/message.md#ClassNames
     */
    static success = "success";
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/message.md#ClassNames
     */
    static warning = "warning";
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/message.md#ClassNames
     */
    static error = "error";
    static className(params) {
        let className = Message.message;
        if (params.type) {
            switch (params.type) {
                case "info":
                    className += ` ${Message.info}`;
                    break;
                case "success":
                    className += ` ${Message.success}`;
                    break;
                case "warning":
                    className += ` ${Message.warning}`;
                    break;
                case "error":
                    className += ` ${Message.error}`;
                    break;
            }
        }
        return className;
    }
    static toString() {
        return Message.message;
    }
}
/**
 * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/nav-sidebar.md
 */
export class NavSidebar {
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/nav-sidebar.md#ClassNames
     */
    static navSidebar = "nav-sidebar";
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/nav-sidebar.md#ClassNames
     */
    static button = "nav-sidebar-btn";
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/nav-sidebar.md#ClassNames
     */
    static separator = "separator";
    static active = "active";
    static className() {
        return NavSidebar.navSidebar;
    }
    static btnClassName(params) {
        let className = NavSidebar.button;
        if (params.active) {
            className += ` ${NavSidebar.active}`;
        }
        return className;
    }
    static separatorClassName() {
        return NavSidebar.separator;
    }
    static toString() {
        return NavSidebar.navSidebar;
    }
}
export class ScrollView {
    static scrollView = "scrollview";
    static className() {
        return ScrollView.scrollView;
    }
    static toString() {
        return ScrollView.scrollView;
    }
}
/**
 * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/selector.md
 */
export class Selector {
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/selector.md#ClassNames
     */
    static selector = "selector";
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/selector.md#ClassNames
     */
    static disabled = "disabled";
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/selector.md#ClassNames
     */
    static selectedOption = "selected-option";
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/selector.md#ClassNames
     */
    static downButton = "down-button";
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/selector.md#ClassNames
     */
    static opened = "opened";
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/selector.md#ClassNames
     */
    static optionsList = "options-list";
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/selector.md#ClassNames
     */
    static option = "option";
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/selector.md#ClassNames
     */
    static top = "top";
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/selector.md#ClassNames
     */
    static noPosition = "no-position";
    static className(params) {
        let className = Selector.selector;
        if (params.disabled) {
            className += ` ${Selector.disabled}`;
        }
        if (params.opened) {
            className += ` ${Selector.opened}`;
        }
        if (params.noPosition) {
            className += ` ${Selector.noPosition}`;
        }
        if (params.position === "top") {
            className += ` ${Selector.top}`;
        }
        return className;
    }
    static optionClassName() {
        let className = Selector.option;
        return className;
    }
    static selectedOptionClassName() {
        let className = Selector.selectedOption;
        return className;
    }
    static listClassName() {
        let className = Selector.optionsList;
        return className;
    }
    static downButtonClassName() {
        let className = Selector.downButton;
        return className;
    }
    static toString() {
        return Selector.selector;
    }
}
export class Separator {
    static separator = "separator";
    static vertical = "vertical";
    static className(params) {
        let className = Separator.separator;
        if (params.vertical) {
            className += ` ${Separator.vertical}`;
        }
        return className;
    }
    static toString() {
        return Separator.separator;
    }
}
export class Skeleton {
    static skeleton = "skeleton";
    static className() {
        return Skeleton.skeleton;
    }
    static toString() {
        return Skeleton.skeleton;
    }
}
export class Spinner {
    static spinner = "spinner";
    static innerCircle = "inner-circle";
    static toString() {
        return Spinner.spinner;
    }
}
/**
 * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/slider.md
 */
export class Slider {
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/slider.md#ClassNames
     */
    static slider = "slider";
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/slider.md#ClassNames
     */
    static disabled = "disabled";
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/slider.md#ClassNames
     */
    static track = "slider-track";
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/slider.md#ClassNames
     */
    static progress = "slider-progress";
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/slider.md#ClassNames
     */
    static thumb = "slider-thumb";
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/slider.md#ClassNames
     */
    static noPosition = "no-position";
    static className(params) {
        let className = Slider.slider;
        if (params.disabled) {
            className += ` ${Slider.disabled}`;
        }
        if (params.noPosition) {
            className += ` ${Slider.noPosition}`;
        }
        return className;
    }
    static trackClassName() {
        let className = Slider.track;
        return className;
    }
    static progressClassName() {
        let className = Slider.progress;
        return className;
    }
    static thumbClassName() {
        let className = Slider.thumb;
        return className;
    }
    static toString() {
        return Slider.slider;
    }
}
/**
 * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/suggestions.md
 */
export class Suggestions {
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/suggestions.md#ClassNames
     */
    static suggestions = "suggestions";
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/suggestions.md#ClassNames
     */
    static option = "suggestions-option";
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/suggestions.md#ClassNames
     */
    static active = "active";
    static className() {
        let className = Suggestions.suggestions;
        return className;
    }
    static optionClassName(params) {
        let className = Suggestions.option;
        if (params.active) {
            className += ` ${Suggestions.active}`;
        }
        return className;
    }
    static toString() {
        return Suggestions.suggestions;
    }
}
/**
 * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/switch.md
 */
export class Switch {
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/switch.md#ClassNames
     */
    static switch = "switch";
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/switch.md#ClassNames
     */
    static disabled = "disabled";
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/switch.md#ClassNames
     */
    static knob = "switch-knob";
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/switch.md#ClassNames
     */
    static active = "active";
    static className(params) {
        let className = Switch.switch;
        if (params.disabled) {
            className += ` ${Switch.disabled}`;
        }
        if (params.active) {
            className += ` ${Switch.active}`;
        }
        return className;
    }
    static toString() {
        return Switch.switch;
    }
}
/**
 * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/typography.md
 */
export class Typography {
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/typography.md#ClassNames
     */
    static text = "text";
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/typography.md#ClassNames
     */
    static subtitle = "subtitle";
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/typography.md#ClassNames
     */
    static label = "label";
    /**
     * Read more at @link https://github.com/ncpa0/ADWaveCSS/blob/master/docs/components/typography.md#ClassNames
     */
    static header = "header";
    static className(params) {
        switch (params.type) {
            case "subtitle":
                return Typography.subtitle;
            case "label":
                return Typography.label;
            case "header":
                return Typography.header;
        }
        return Typography.text;
    }
    static toString() {
        return Typography.text;
    }
}
export class Alert {
    static alert = "alert";
    static info = "info";
    static success = "success";
    static warning = "warning";
    static error = "error";
    static className(params) {
        switch (params.type) {
            case "info":
                return `${Alert.alert} ${Alert.info}`;
            case "success":
                return `${Alert.alert} ${Alert.success}`;
            case "warning":
                return `${Alert.alert} ${Alert.warning}`;
            case "error":
                return `${Alert.alert} ${Alert.error}`;
        }
        return Alert.alert;
    }
    static toString() {
        return Alert.alert;
    }
}
export class BreadCrumbs {
    static breadcrumbs = "breadcrumbs";
    static item = "breadcrumb-item";
    static separator = "breadcrumb-separator";
    static Active = "active";
    static Activable = "activable";
    static className() {
        return BreadCrumbs.breadcrumbs;
    }
    static itemClassName(params) {
        let className = BreadCrumbs.item;
        if (params.active) {
            className += ` ${BreadCrumbs.Active}`;
        }
        if (params.activable) {
            className += ` ${BreadCrumbs.Activable}`;
        }
        return className;
    }
    static toString() {
        return BreadCrumbs.breadcrumbs;
    }
}
/**
 * All CSS variables with colors provided by the Adwave theme.
 */
export var Colors;
(function (Colors) {
    Colors["Bg1"] = "--clr-bg-1";
    Colors["Bg2"] = "--clr-bg-2";
    Colors["Bg3"] = "--clr-bg-3";
    Colors["Bg4"] = "--clr-bg-4";
    Colors["Bg5"] = "--clr-bg-5";
    Colors["Bg6"] = "--clr-bg-6";
    Colors["Fg"] = "--clr-fg";
    Colors["Text"] = "--clr-text";
    Colors["Text2"] = "--clr-text-secondary";
    Colors["InfoText"] = "--clr-info-text";
    Colors["InfoFg"] = "--clr-info-fg";
    Colors["InfoBg"] = "--clr-info-bg";
    Colors["SuccessText"] = "--clr-success-text";
    Colors["SuccessFg"] = "--clr-success-fg";
    Colors["SuccessBg"] = "--clr-success-bg";
    Colors["WarningText"] = "--clr-warning-text";
    Colors["WarningFg"] = "--clr-warning-fg";
    Colors["WarningBg"] = "--clr-warning-bg";
    Colors["ErrorText"] = "--clr-error-text";
    Colors["ErrorFg"] = "--clr-error-fg";
    Colors["ErrorBg"] = "--clr-error-bg";
    Colors["Dimmed"] = "--clr-dimmed";
    Colors["Btn"] = "--clr-btn";
    Colors["BtnToggled"] = "--clr-btn-toggled";
    Colors["BtnHover"] = "--clr-btn-hover";
    Colors["BtnPressed"] = "--clr-btn-pressed";
    Colors["BtnAdaptive"] = "--clr-btn-adaptive";
    Colors["BtnAdaptiveToggled"] = "--clr-btn-adaptive-toggled";
    Colors["BtnAdaptiveHover"] = "--clr-btn-adaptive-hover";
    Colors["BtnAdaptivePressed"] = "--clr-btn-adaptive-pressed";
    Colors["Focus"] = "--clr-focus";
    Colors["Border"] = "--clr-border";
    Colors["PrimaryText"] = "--clr-primary-text";
    Colors["Primary0"] = "--clr-primary-000";
    Colors["Primary1"] = "--clr-primary-100";
    Colors["Primary2"] = "--clr-primary-200";
    Colors["Primary3"] = "--clr-primary-300";
    Colors["Primary4"] = "--clr-primary-400";
    Colors["Primary5"] = "--clr-primary-500";
    Colors["Primary6"] = "--clr-primary-600";
    Colors["Primary7"] = "--clr-primary-700";
    Colors["Primary8"] = "--clr-primary-800";
    Colors["Primary9"] = "--clr-primary-900";
    Colors["DangerText"] = "--clr-danger-text";
    Colors["Danger0"] = "--clr-danger-000";
    Colors["Danger1"] = "--clr-danger-100";
    Colors["Danger2"] = "--clr-danger-200";
    Colors["Danger3"] = "--clr-danger-300";
    Colors["Danger4"] = "--clr-danger-400";
    Colors["Danger5"] = "--clr-danger-500";
    Colors["Danger6"] = "--clr-danger-600";
    Colors["Danger7"] = "--clr-danger-700";
    Colors["Danger8"] = "--clr-danger-800";
    Colors["Danger9"] = "--clr-danger-900";
    Colors["ListItem"] = "--clr-list-elem";
    Colors["ListItemBorder"] = "--clr-list-elem-border";
    Colors["ListItemHover"] = "--clr-list-elem-hover";
    Colors["ListItem2"] = "--clr-list-elem-2";
    Colors["ListItemBorder2"] = "--clr-list-elem-border-2";
    Colors["ListItemHover2"] = "--clr-list-elem-hover-2";
    Colors["SliderThumb"] = "--clr-slider-thumb";
})(Colors || (Colors = {}));
Object.freeze(Box);
Object.freeze(Button);
Object.freeze(Card);
Object.freeze(Checkbox);
Object.freeze(Dialog);
Object.freeze(Frame);
Object.freeze(Input);
Object.freeze(List);
Object.freeze(Message);
Object.freeze(NavSidebar);
Object.freeze(ScrollView);
Object.freeze(Selector);
Object.freeze(Separator);
Object.freeze(Skeleton);
Object.freeze(Spinner);
Object.freeze(Slider);
Object.freeze(Suggestions);
Object.freeze(Switch);
Object.freeze(Theme);
Object.freeze(Typography);
Object.freeze(Alert);
Object.freeze(Colors);
Object.freeze(BreadCrumbs);
export default {
    Box,
    Button,
    Card,
    Checkbox,
    Dialog,
    Frame,
    Input,
    List,
    Message,
    NavSidebar,
    ScrollView,
    Selector,
    Separator,
    Skeleton,
    Spinner,
    Slider,
    Suggestions,
    Switch,
    Theme,
    Typography,
    Alert,
    BreadCrumbs,
    Colors,
};
